/* Você precisará declarar a função adicionar, no arquivo app.js:

function adicionar() {

}
Agora, dentro dessa função, será necessário declarar variáveis que representam o nome do amigo digitado no formulário e a lista de amigos participantes:

let amigo = document.getElementById('nome-amigo');
let lista = document.getElementById('lista-amigos');
Na sequência, você precisa adicionar o amigo na lista, verificando com um bloco condicional se a lista de participantes está vazia ou não, para saber se precisa adicionar uma vírgula após o nome do amigo:

if (lista.textContent == '') {
    lista.textContent = amigo.value;
} else {
    lista.textContent = lista.textContent + ', ' + amigo.value;
}
Por fim, limpe o nome do amigo adicionado do formulário:

amigo.value = '';
Pronto! Abra a página do projeto no navegador e verifique se é possível incluir amigos na lista de participantes.

Você precisará declarar uma variável para armazenar os participantes, sendo que essa variável será do tipo array e deve ser declarada fora da função adicionar, ou seja, no início do arquivo app.js:

let amigos = [];
Agora, na função adicionar, precisa incluir no array o amigo adicionado, antes do bloco condicional:

amigos.push(amigo.value);
Na sequência, precisa criar a função embaralhar, que será responsável por embaralhar o array com a utilização do algoritmo Fisher-Yates:

function embaralhar(lista) {
    for (let indice = lista.length; indice; indice--) {
        const indiceAleatorio = Math.floor(Math.random() * indice);
        [lista[indice - 1], lista[indiceAleatorio]] = [lista[indiceAleatorio], lista[indice - 1]];
    }
}
Por fim, crie a função sortear, que deve chamar a função embaralhar:

function sortear() {
    embaralhar(amigos);
}
Pronto! Abra a página do projeto no navegador e verifique se os amigos continuam sendo adicionados à lista de participantes.

Você precisará alterar a função sortear, declarando uma variável para armazenar a lista de participantes e realizando o sorteio, após a chamada à função sortear:

let sorteio = document.getElementById('lista-sorteio');
for (let i = 0; i < amigos.length; i++) {
    if (i == amigos.length - 1) {
        sorteio.innerHTML = sorteio.innerHTML + amigos[i] +' --> ' +amigos[0] + '<br/>';
    } else {
        sorteio.innerHTML = sorteio.innerHTML + amigos[i] +' --> ' +amigos[i + 1] + '<br/>';
    }
}
Pronto! Abra a página do projeto no navegador e verifique se o sorteio está sendo realizado corretamente.



Você precisará criar uma nova função chamada reiniciar, que será responsável por limpar o array e também as listas de participantes e do sorteio:

function reiniciar() {
    amigos = [];
    document.getElementById('lista-amigos').innerHTML = '';
    document.getElementById('lista-sorteio').innerHTML = '';
}
Pronto! Abra a página do projeto no navegador e verifique se o botão de reiniciar está funcionando corretamente.

Confira o código final do arquivo app.js:

let amigos = [];

function adicionar() {
    let amigo = document.getElementById('nome-amigo');
    let lista = document.getElementById('lista-amigos');

    amigos.push(amigo.value);

    if (lista.textContent == '') {
        lista.textContent = amigo.value;
    } else {
        lista.textContent = lista.textContent + ', ' + amigo.value;
    }

    amigo.value = '';
}

function sortear() {
    embaralhar(amigos);

    let sorteio = document.getElementById('lista-sorteio');
    for (let i = 0; i < amigos.length; i++) {
        if (i == amigos.length - 1) {
            sorteio.innerHTML = sorteio.innerHTML + amigos[i] +' --> ' +amigos[0] + '<br/>';
        } else {
            sorteio.innerHTML = sorteio.innerHTML + amigos[i] +' --> ' +amigos[i + 1] + '<br/>';
        }
    }
}

function embaralhar(lista) {
    for (let indice = lista.length; indice; indice--) {
        const indiceAleatorio = Math.floor(Math.random() * indice);
        [lista[indice - 1], lista[indiceAleatorio]] = [lista[indiceAleatorio], lista[indice - 1]];
    }
}

function reiniciar() {
    amigos = [];
    document.getElementById('lista-amigos').innerHTML = '';
    document.getElementById('lista-sorteio').innerHTML = '';
}


Seu amigo Paulo, que está estudando programação, escreveu o seguinte código que exibe os números que são múltiplos de 5, entre 1 e 100:

for (let numero = 1; numero <= 100; numero++) {
    if (numero / 5) {
        console.log(numero);
    }
}

A verificação do número ser múltiplo de 5, no bloco if, está incorreta.


O código dentro dos parênteses do if está fazendo uma divisão por 5, ao invés de checar se o resto da divisão é zero. O código correto para verificar se o número é múltiplo de 5 é: numero % 5 == 0.



1 - Criar uma funcionalidade no Projeto Amigo Secreto que permita ao usuário clicar em um amigo na lista e removê-lo. Atualizar a visualização da lista após a remoção.

let amigos = [];


function adicionar() {
    let amigo = document.getElementById('nome-amigo');
    let lista = document.getElementById('lista-amigos');


    amigos.push(amigo.value);


    if (lista.textContent == '') {
        lista.textContent = amigo.value;
    } else {
        lista.textContent = lista.textContent + ', ' + amigo.value;
    }


    amigo.value = '';


    atualizarLista();
    atualizarSorteio();
}


function sortear() {
    embaralhar(amigos);


    let sorteio = document.getElementById('lista-sorteio');
    for (let i = 0; i < amigos.length; i++) {
        if (i == amigos.length - 1) {
            sorteio.innerHTML = sorteio.innerHTML + amigos[i] +' --> ' +amigos[0] + '<br/>';
        } else {
            sorteio.innerHTML = sorteio.innerHTML + amigos[i] +' --> ' +amigos[i + 1] + '<br/>';
        }
    }
}


function excluirAmigo(index) {
    amigos.splice(index, 1);
    atualizarLista();
    atualizarSorteio();
}


function embaralhar(lista) {
    for (let indice = lista.length; indice; indice--) {
        const indiceAleatorio = Math.floor(Math.random() * indice);
        [lista[indice - 1], lista[indiceAleatorio]] = [lista[indiceAleatorio], lista[indice - 1]];
    }
}


function atualizarSorteio() {
    let sorteio = document.getElementById('lista-sorteio');
    sorteio.innerHTML = '';
}


function atualizarLista() {
    let lista = document.getElementById('lista-amigos');
    lista.innerHTML = '';


    for (let i = 0; i < amigos.length; i++) {
        // Cria um elemento de parágrafo para cada amigo
        let paragrafo = document.createElement('p');
        paragrafo.textContent = amigos[i];
       
        // Adiciona um evento de clique para excluir o amigo
        paragrafo.addEventListener('click', function() {
            excluirAmigo(i);
        });


        // Adiciona o parágrafo à lista
        lista.appendChild(paragrafo);
    }
}


function reiniciar() {
    amigos = [];
    document.getElementById('lista-amigos').innerHTML = '';
    document.getElementById('lista-sorteio').innerHTML = '';
}



2 - Adicione os números 1,2,3 em uma variável chamada minhaLista e armazene os números 4, 5 e 6 separadamente em outra variável. Use o método concat() para combinar as sequências de valores em uma nova lista chamadanovaLista. Imprima novaLista no console.
// Declarando uma variável do tipo array
let minhaLista = [];

// Adicionando elementos com push
minhaLista.push(1, 2, 3);
console.log("Adicionando elementos:", minhaLista);

// Criando uma nova variável
let outrosNumeros = [4, 5, 6];

// Concatenando arrays
let novaLista = minhaLista.concat(outrosNumeros);
console.log("Juntando Arrays:", novaLista);

3 - Remova o último elemento de novaLista. Imprima novaLista após a remoção.
// Removendo o último elemento
novaLista.pop();
console.log("Desafio 4:", novaLista);

4 - Utilize o algoritmo de Fisher-Yates (também conhecido como Knuth Shuffle) para embaralhar os elementos em novaLista. Pesquise e adapte o código para realizar o embaralhamento.

function embaralharArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// Embaralhando novaLista
novaLista = embaralharArray(novaLista);
console.log("Embaralhando a Lista:", novaLista);

5 - Crie uma função chamada removerDuplicatas que aceita um array como parâmetro e retorna um novo array sem elementos duplicados. Teste a função com novaLista e imprima o array resultante.

// Função para remover duplicatas de um array
function removerDuplicatas(array) {
  return [...new Set(array)];
}

// Testando a função com novaLista
let novaListaSemDuplicatas = removerDuplicatas(novaLista);
console.log("Remover duplicatas:", novaListaSemDuplicatas);




Declarar uma variável do tipo array para representar uma lista;

Adicionar um elemento a um array com a função push;

Utilizar um código já desenvolvido por terceiros, para realizar o embaralhamento de elementos em um array.

******************************************************************************************************************

Você precisará alterar o código da função adicionar, adicionando um condicional para checar o nome digitado no formulário:

function adicionar() {
    let amigo = document.getElementById('nome-amigo');

    if (amigo.value == '') {
        alert('Informe o nome do amigo!');
        return;
    }

    //resto do código continua inalterado
}
Pronto! Abra a página do projeto no navegador e verifique se não é mais possível adicionar um amigo sem informar seu nome.


Você precisará alterar o código da função sortear, adicionando um condicional para checar o número mínimo de participantes:

function sortear() {
     if (amigos.length < 4) {
        alert('Adicione pelo menos 4 amigos!');
        return;
    }

    embaralhar(amigos);

    //resto do código continua inalterado
}
Pronto! Abra a página do projeto no navegador e verifique se não é mais possível realizar o sorteio com menos de 4 pessoas.

Você precisará alterar o código da função adicionar, incluindo um condicional para checar se a pessoa já foi adicionada na lista de participantes:

function adicionar() {
     if (amigos.length < 4) {
        alert('Adicione pelo menos 4 amigos!');
        return;
    }

    if (amigos.includes(amigo.value)) {
        alert('Nome já adicionado!');
        return;
    }

    //resto do código continua inalterado
}
Pronto! Abra a página do projeto no navegador e verifique se não é mais possível adicionar a mesma pessoa mais de uma vez na lista de participantes.


1- No projeto do amigo secreto foi feita uma validação para não permitir que uma mesma pessoa seja adicionada mais de uma vez na lista de participantes. Entretanto, o código não diferencia letras maiúsculas de minúsculas.

Ou seja, podemos incluir os nomes ANA e ana, pois a validação de duplicidade não vai detectar essa diferença.

Escolha a alternativa que indica uma maneira de impedir que essa situação ocorra no projeto:

resposta: Converter o nome digitado para maiúsculo antes de guardar no array e de realizar a validação.


Isso vai garantir que nomes em diferentes formas de capitalização (maiúsculas e minúsculas) sejam tratados como iguais, evitando assim que a mesma pessoa seja adicionada mais de uma vez na lista de participantes, independentemente da capitalização digitada.


DESAFIOS: 
1 - Crie uma função que valide se um número é positivo, negativo ou zero.

function validarNumero(numero) {
    if (numero > 0) {
        return "Positivo";
    } else if (numero < 0) {
        return "Negativo";
    } else {
        return "Zero";
    }
}

console.log(validarNumero(-1))

2 - Implemente uma função que verifique se uma pessoa é maior de idade.

function verificarIdade(idade) {
    return idade >= 18 ? "Maior de idade" : "Menor de idade";
}

console.log(verificarIdade(18))


3 - Desenvolva uma função que valide se uma string é vazia ou não.

function validarString(texto) {
    return texto === "" ? "String vazia" : "String não vazia";
}

console.log(validarString("Aqui há um texto?"))
console.log(validarString(""))


4 - Crie uma função que determine se um ano é bissexto

function verificarAnoBissexto(ano) {
    if ((ano % 4 === 0 && ano % 100 !== 0) || ano % 400 === 0) {
        return "Ano bissexto";
    } else {
        return "Não é bissexto";
    }
}

console.log(verificarAnoBissexto(2025))


5 - Implemente uma função que calcule a média de dois números, interrompendo a execução se algum dos números não for válido.

function calcularMedia(num1, num2) {
    if (isNaN(num1) || isNaN(num2)) {
        return "Um dos números não é válido.";
    }
    return (num1 + num2) / 2;
}

console.log(calcularMedia(8,5))

6 - Desenvolva uma função que receba um array como parâmetro e retorne o seu tamanho.

function obterTamanhoArray(arr) {
    return arr.length;
}

//exemplo de uso

const minhaLista = [1,2,3,4,5,6,7,8,9,10]

console.log(obterTamanhoArray(minhaLista))

7 - Crie um array e utilize a função includes para verificar se um elemento específico está presente


const meuArray = [10, 20, 30, 40, 50];
console.log("O array contém o número 30?", meuArray.includes(30));
//saída esperada: "O array contém o número 30?" true

8 - Implemente uma função que receba um array e um elemento, e retorne se o elemento está presente no array.
,
// Função que verifica se um elemento está presente no array
function verificarElementoNoArray(arr, elemento) {
    return arr.includes(elemento);
}

// Exemplo de uso
const meuArray = [10, 20, 30, 40, 50];
const elementoProcurado = 30;

// Utilizando a função para verificar a presença do elemento no array
const elementoEstaPresente = verificarElementoNoArray(meuArray, elementoProcurado);

// Exibindo o resultado
if (elementoEstaPresente) {
    console.log(`O elemento ${elementoProcurado} está presente no array.`);
} else {
    console.log(`O elemento ${elementoProcurado} não está presente no array.`);
}

9 - Crie um array de strings e utilize includes para verificar se uma determinada string está presente.

const palavras = ["apple", "banana", "orange", "grape"];
console.log("A palavra 'banana' está no array?", palavras.includes("banana"));

//saída esperada: "A palavra 'banana' está no array?" true

10 - Desenvolva uma função que receba um array de objetos representando estudantes de um curso e um objeto que representa um estudante procurado. Depois retorne se o objeto está presente no array.

// Função que verifica se um objeto está presente no array
function verificarObjetoNoArray(arr, objeto) {
    return arr.some(item => JSON.stringify(item) === JSON.stringify(objeto));
}

// Array de objetos representando alunos
const alunos = [
    { id: 1, nome: 'João', idade: 20 },
    { id: 2, nome: 'Maria', idade: 22 },
    { id: 3, nome: 'Pedro', idade: 21 },
    { id: 4, nome: 'Ana', idade: 19 }
];

// Objeto que queremos verificar se está presente no array
const alunoProcurado = { id: 2, nome: 'Maria', idade: 22 };

// Utilizando a função para verificar a presença do objeto no array
const objetoEstaPresente = verificarObjetoNoArray(alunos, alunoProcurado);

// Exibindo o resultado
if (objetoEstaPresente) {
    console.log('O aluno está presente no array.');
} else {
    console.log('O aluno não está presente no array.');
}


11 - Crie uma função que receba um array de números e retorne a soma dos elementos pares e o produto dos elementos ímpares.

function calcularSomaProduto(array) {
    let somaPares = 0;
    let produtoImpares = 1;

    for (let numero of array) {
        if (numero % 2 === 0) {
            somaPares += numero;
        } else {
            produtoImpares *= numero;
        }
    }

    return {
        somaPares,
        produtoImpares
    };
}

const numeros = [1, 2, 3, 4, 5];
const resultado = calcularSomaProduto(numeros);
console.log("Soma dos pares:", resultado.somaPares);
console.log("Produto dos ímpares:", resultado.produtoImpares);

*/
